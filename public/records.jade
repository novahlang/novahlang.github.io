
h1(tabIndex="-1") Records

p.
  Records and row polymorphism are the core of Novah data structures.
  Records are immutable and persistent, so functions that change records will always return a new version.
  Novah records support duplicated fields, but you can only retrieve the last value of a field.

h2 Accessing fields

p Fields can be accessed using dot syntax.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module records

    name : { name : String | r } -> String
    name person = person.name

    // nested record access
    city : { address : { city : String } | a } -> String
    city = _.address.city
p.visually-hidden End code.

h2 String fields

p.
  Novah requires every field to be a valid identifier but it's possible to use any string
  as a field.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module records

    stringFields : { "Password" : String, "User Name" : String }
    stringFields = { "User Name": "foo", "Password": "***"}

    utfFields : { "âˆ€" : String, "âˆ‰" : Boolean, "ðŸ˜‰" : String }
    utfFields = {"ðŸ˜‰": "wink", "âˆ‰": true, "âˆ€": "forall"}
p.visually-hidden End code.

h2 Adding new fields

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module records

    addData :
      { name : String }
      -> { name : String, age : Int, eyeColor : String }
    addData person = { age: 31, eyeColor: "blue" | person }

    // using anonymous lambdas
    addData2 :
      { name : String }
      -> { name : String, age : Int, eyeColor : String }
    addData2 = { age: 31, eyeColor: "blue" | _ }

    // the original name cannot be accessed until the current is removed
    duplicates : { name : String } -> { name : String, name : String }
    duplicates person = { name : "Override" | person }
p.visually-hidden End code.

h2 Removing fields

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module records

    typealias Person = { name : String, age : Int}

    nameless : Person -> { age : Int }
    nameless = { - name | _ }

    // removing multiple fields
    nothing : Person -> {}
    nothing = { - name, age | _ }
p.visually-hidden End code.

h2 Updating and setting fields

p.
  Setting a new value to a field can be done using the <code class="inline-code">{ .field = newValue | record }</code> syntax.
  Updating a field can be done using the <code class="inline-code">{ .field -> function | record }</code> syntax.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module records

    setName : String -> { name : String | r } -> { name : String | r }
    setName newName = { .name = newName | _ }

    upperName : { name : String | r } -> { name : String | r }
    upperName = { .name -> String.upperCase | _ }

    // you can update nested fields
    nested :
      { address : { city : String | r2 } | r }
      -> { address : { city : String | r2 } | r }
    nested = { .address.city = "Tokyo" | _ }
p.visually-hidden End code.

h2 Merging records

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module records

    typealias Person = { name : String, age : Int}

    tim : Person
    tim = { name: "Tim", age: 21 }

    merge : { age : Int, eye : String, height : Float64, name : String }
    merge = { + tim, { eye: "Blue", height: 33.2 }}

    // duplicates are allowed
    dups : { age : Int, age : Int, name : String }
    dups = { + tim, { age: 44 }}

    // it's not possible to merge two records with unknow labels
    // at least one of the records should have no unknow labels
    \#[noWarn]
    fail rec1 rec2 = { + rec1, rec2}
p.visually-hidden End code.