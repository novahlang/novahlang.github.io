
h1(tabIndex="-1") Syntax

h2 Module definition

p Every novah file should start with a module definition.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module my.namespace

    ...
p.visually-hidden End code.

h2 Imports

p.
  Imports need to be defined after the module definition and before any other definitions.
  They can be qualified with the <code class="inline-code">as</code> keyword or given a list of names to import.
  Type constructors can be imported explicitly for a type or all at once with <code class="inline-code">(..)</code>.
  Raw unqualified imports are not allowed except for core namespaces.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module my.namespace

    import module1 as Mod
    import module2 (fun1, Type1(Ctor1, Ctor2), Type2(..))

    // error
    import unqualified
p.visually-hidden End code.

h2 Visibility

p.
  Declarations in Novah are private by default. The <code class="inline-code">pub</code> keyword should be used to create public declarations.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module visibility

    // private declaration
    foo : Int
    foo = 3

    // public declaration
    pub
    bar : Int -> String
    bar x = toString x
p.visually-hidden End code.

p.
  The same is true for declared types, except the <code class="inline-code">pub+</code> keyword can be used to also expose the constructors.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module visibility

    // private type
    type Foo = Foo Int

    // public type with private constructors
    pub
    type Bar = Bar Int

    // public type with public constructors
    pub+
    type Baz = Baz Int
p.visually-hidden End code.

h2 Entry point

p.
  Any namespace containing a public function called <code class="inline-code">main</code> with type <code class="inline-code">Array String -> Unit</code> will be compiled into a runnable jvm class.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module entrypoint

    pub
    main : Array String -> Unit
    main args =
      println ("Hello " ++ args.[0])
p.visually-hidden End code.

h2 Functions

p.
  Functions and values can be easily defined.
  All values in Novah are immutable, so there are no global mutable variables.
  All top level definitions must start with a lower case character.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module functions

    fun1 : String -> Boolean
    fun1 str = str == "true"

    val1 : Float64
    val1 = 3.1415

    // Top level definitions require explicit types
    // unless they have a `noWarn` attribute
    // which can also be put at the module level
    \#[noWarn]
    times10 x = x * 10
p.visually-hidden End code.

h2 Algebraic data types (ADTs)

p.
  Types can be defined with the keyword <code class="inline-code">type</code>.
  A type can have multiple constructors (sum type) and multiple parameters (product type).
  Both types and constructors must start with an upper case character.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module types

    // Types can be parameterized
    type Option a = Some a | None

    // Simple enumeration
    type Color = Red | Black

    // A recursive type
    type LinkedList a = Nil | Cons a (LinkedList a)
p.visually-hidden End code.

h2 Type aliases

p.
  An alias to a type can be created with the <code class="inline-code">typealias</code> keyword.
  Aliases are just syntatic sugar and are considered the same type as their alias by the compiler.
  <code class="inline-code">Int</code> is a typealias to <code class="inline-code">Int32</code>.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module types2

    typealias MyBoolean = Boolean

    // Type aliases can have parameters
    typealias Maybe a = Option a

    // Aliases cannot be recursive
    typealias Wrong a = Option (Wrong a)
p.visually-hidden End code.

h2 Strings

p Strings can be created with double quotes like in Java or with triple quotes for unescaped, multi-line strings.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    \#[noWarn]
    module strings

    str1 = "hello world\n"

    str2 = """Triple quoted
    strings can span multiple lines
    and don't consider any kind of escape like \n \t
    """
p.visually-hidden End code.

h2 Regular expression patterns

p Novah has support for literal regex patterns. Literal regexes won't escape characters like normal strings, except for double quotes (").

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module regexes

    \#[noWarn]
    foo () =
      let [_, num] = Re.find #"(\d+)" "12345"
      println (int num)
p.visually-hidden End code.

h2 Conditional expressions

p Novah has two conditional expressions: <code class="inline-code">if</code> and <code class="inline-code">case</code>.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module conditionals

    // Both the then and else cases must have the same type
    abs : Int -> Int
    abs x = if x > 0 then x else negate x

    // An if without an else must always return Unit
    printPositive : Int -> Unit
    printPositive x =
      if x > 0 then
        println x

    mapList : (a -> b) -> List a -> List b
    mapList f list = case list of
      [] -> []
      [x :: xs] -> [f x] ++ mapList f xs
p.visually-hidden End code.

p See
  =" "
  a(href="/pattern-matching") pattern matching.

h2 Atoms

p.
  Sometimes you need to mutate values to achieve better Java interoperability or a more idiomatic code.
  Novah has atoms for these situations.

p.
  Atoms are synchronous atomic values to manage independent state. They can be dereferenced, changed and reset.
  They should always hold immutable values and the swap function has to be free of side effects, as it may run multiple times.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module atoms

    pub
    main : Array String -> Unit
    main _ =
      // create and atom
      let val = atom 10
      // dereference an atom
      println @val
      // reset the value
      val := 99
      reset 99 val
      // apply a function the value
      val ::= (_ * 10)
      swap (_ * 10) val
p.visually-hidden End code.

h2 While loop

p Even though Novah support while loops, a tail recursive function is the idiomatic way to represent such constructs.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module loops

    // Not idiomatic
    factorialIterative : Int -> Int
    factorialIterative x =
      let fact = atom x
      let i = atom x

      while @i > 1 do
        swap (_ - 1) i
        swap (_ * @i) fact
      @fact

    // Idiomatic version
    // Novah will optimize the tail recursion to a loop
    factorialRecursive : Int -> Int
    factorialRecursive x =
      let fact num acc = case num of
        0 -> acc
        1 -> acc
        n -> fact (n - 1) (acc * n)
      fact x 1
p.visually-hidden End code.

h2 Operators

p It's possible to define new operators in Novah.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module operators

    (?!) : Option a -> a -> a
    (?!) opt default = case opt of
      Some x -> x
      None -> default

    or0 : Option Int -> Int
    or0 n = n ?! 0
p.visually-hidden End code.

p Any function can be used as an operator by surrounding it with <code class="inline-code">`</code>, making it a backtick operator.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module operators

    has0 : List Int -> Boolean
    has0 list = 0 `isIn` list
p.visually-hidden End code.

h3#associativity Associativity

table(aria-labelledby="associativity")
  thead
    tr
      th(scope="col") Operator
      th(scope="col") Associativity
  tbody
    tr
      td &lt;|
      td Right
    tr
      td $ starting operators
      td Right
    tr
      td : starting operators
      td Right
    tr
      td everything else
      td Left

h3#precedence Precedence

table(aria-labelledby="precedence")
  thead
    tr
      th(scope="col") Operator (first character)
      th(scope="col") Example
      th(scope="col") Precedence
  tbody
    tr
      td ;
      td (3 ; 5)
      td 0
    tr
      td $
      td -
      td 1
    tr
      td |
      td true || false
      td 2
    tr
      td &
      td true && false
      td 3
    tr
      td =, !
      td 3 == 1, string ! index
      td 4
    tr
      td >, &lt;
      td 5 > 1, 3 &lt;= 7
      td 5
    tr
      td +, -, :, ?
      td 1 + 1, head :: tail, option ? default
      td 6
    tr
      td *, /, %
      td 3 * 9, 5 / 2
      td 7
    tr
      td ^, .
      td [1 ... 10], 'a' .. 'z'
      td 8
    tr
      td `
      td (3 + 3) `shouldBe` 6
      td 9

h2 Ranges

p.
  Ranges are just normal user-defined operators in Novah.
  There is syntactic sugar for creating ranges of lists and sets.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module ranges

    zeroToTen : Range Int
    zeroToTen = 1 .. 10

    zeroToNine : Range Int
    zeroToNine = 1 ... 10

    digitList : List Int
    digitList = [0 ... 10]

    lowerChars : Set Char
    lowerChars = \#{'a' .. 'z'}

    oddDigits : Range Int
    oddDigits = range 1 10 2

    pub
    main : Array String -> Unit
    main _ =
      forEachRange oddDigits println
p.visually-hidden End code.

h2#collections Collections

p
  | Novah comes with literal support for commonly used data structures like lists, sets, tuples and (row-polymorphic) records.
  | All Novah data structures are immutable and persistent, using
  =" "
  a(href="https://github.com/lacuna/bifurcan") bifurcan.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module collections

    aList : List Int
    aList = [1, 2, 3, 4, 5]

    aSet : Set Char
    aSet = \#{'a', 'b', 'c'}

    aTuple : Tuple Boolean Char
    aTuple = true ; 'z'

    pointRecord : { x : Float64, y : Float64 }
    pointRecord = { x: 1.2, y: 5.66 }

    // Novah also has support for persistent maps
    // but there's no literal syntax for it
    aMap : Map String Int
    aMap = Map.new ["a" ; 0, "b" ; 1, "c" ; 2]
p.visually-hidden End code.

p Lists in Novah are implemented using RRB (Relaxed-Radix-Balanced) vectors so they can be used as linked lists or vectors without any performance penalty.

p See
  =" "
  a(href="/records") records.

h2 Type annotations and casts

p Novah requires almost no type annotations but values can still be annotated with a type.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module annotations

    foo : Unit -> Int
    foo () =
      // annotate a value
      let pi = Math.pi : Float64
      // compilation error: types don't match
      let piInt = Math.pi : Int
      // annotate a function parameter
      let fun (x : Int) = x + 1
p.visually-hidden End code.

p Top level values are required to be annotated for documentation purpose unless a <code class="inline-code">\#[noWarn]</code> attribute is present.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module annotations

    // compilation error: no type annotation
    foo () = 1

    // OK
    \#[noWarn]
    bar () = 1
p.visually-hidden End code.

p Types can also be cast to some other types with the <code class="inline-code">as</code> keyword. Casts should only be used for Java interoperability as they can cause runtime errors!

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module casts

    pub
    hashCode : a -> Int32
    hashCode x = (x as Object)#hashCode()
p.visually-hidden End code.

h2 Optional values

p
 | Novah has a type for representing optional values: <code class="inline-code">Option a</code>.
 | This type is converted to a nullable Java object (or a boxed type in case of primitives) for optimization and interoperability purposes.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module options

    // options can be pattern matched
    hasValue : Option a -> Boolean
    hasValue option = case option of
      Some _ -> true
      None -> false

    // ?: can be used to return default values from an option
    or0 : Option Int -> Int
    or0 x = x ?: 0

    // ?? can be used to execute functions inside an option,
    // like `Options.map`
    thread : Option (List Int) -> Option Int
    thread list = list ?? List.map (_ + 1) ?? List.sum
p.visually-hidden End code.

p
 | Options can be unwrapped with the <code class="inline-code">!!</code> operator.
 | Note that this is an unsafe operation and should be used only in tests or throw-away code!

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module options

    pub
    main : Array String -> Unit
    main _ =
      // unwrap the option as the list is not empty
      println (List.min [5, 9, 3, 6, 1, 8])!!
      // _!! can be used as a function that unwraps an option
      [5, 9, 3, 6, 1, 8]
      |> List.max
      |> _!!
      |> println
p.visually-hidden End code.

h2 Threading functions

p
 | In object oriented language it's common to chain methods using dot syntax. Ex.: <code class="inline-code">obj.method1().method2()</code>.
 | In Novah the idiomatic way to achieve this is the railway operator <code class="inline-code">|></code> and its friends: <code class="inline-code"><|, <<, >></code>.

h3#precedence Threading operators

table(aria-labelledby="threading-operators")
  thead
    tr
      th(scope="col") Operator
      th(scope="col") Name
      th(scope="col") Example
  tbody
    tr
      td |>
      td railway
      td "56" |> String.reverse |> int
    tr
      td <|
      td reverse railway
      td int <| String.reverse <| "56"
    tr
      td >>
      td forward function composition
      td String.split "," >> List.size
    tr
      td <<
      td backward function composition
      td List.size << String.split ","

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module railway

    throwDice : Int -> Int -> Int
    throwDice faces modifier =
      [1 .. faces]
      |> List.randNth
      |> (_ + modifier)

    throwD6 : Int -> Int
    throwD6 = throwDice 6

    parseNumbers : String -> List Int
    parseNumbers = String.split "," >> List.map int
p.visually-hidden End code.

h2 Anonymous function arguments

p Novah support unamed lambda arguments in some specific cases using <code class="inline-code">_</code> (underscore) as the function parameter.

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module anonymouslambdas

    foreign import java.lang.Math

    // in operators
    plus1 : List Int -> List Int
    plus1 list = List.map (_ + 1) list

    // in ifs
    ifs : Boolean -> Int
    ifs = if _ then 1 else -1

    ifs2 : Int -> a -> a -> a
    ifs2 num = if num == 0 then _ else _

    // in cases
    cases : List a -> String
    cases = case _ of
      [] -> "empty"
      [_] -> "one"
      _ -> "more"

    cases2 : Option Int -> Option Int -> Int
    cases2 = case _, _ of
      Some x, Some y -> x + y
      Some x, None -> x
      None, Some y -> y
      None, None -> -1

    // in record access
    names : List { name : String } -> List String
    names = List.map _.name

    // in record construction
    person : String -> Int -> { age : Int, name : String }
    person = { name: _, age: _ }

    // in native function arguments
    exps : List Float64
    exps = List.map Math#exp(_) [3.0, 5.0, 9.0]
p.visually-hidden End code.

h2 Exceptions

p.
  Novah ditches exceptions in favor of type-safe errors using the Result type, but in order
  to support some Java constructs, exceptions are also supported.

h3 Throwing exceptions

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module throwing

    foreign import java.lang.RuntimeException

    foo : Unit -> a
    foo () =
      throw RuntimeException#new("oops")
p.visually-hidden End code.

h3 Catching exceptions

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module catching

    foreign import java.lang.Exception
    foreign import java.lang.Throwable

    foo : DangerClass -> Unit
    foo object =
      try
        println object#dangerousMethod()
      catch
        :? Exception as e -> println e#getMessage()
        :? Throwable -> println "a throwable error"
      finally
        println "it's over"
p.visually-hidden End code.

h3 Using Result

p.visually-hidden Begin code:
pre.code
  code.microlight.
    module resulterrors

    foreign import java.io.File
    foreign import java.io.IOException

    createFile : String -> Result Boolean String
    createFile name =
      try
        Ok File#new(name)#createNewFile()
      catch
        :? IOException as ioe -> Err ioe#getMessage()

    foo : Unit -> Unit
    foo () =
      case createFile "/tmp/myFile" of
        Ok _ -> println "worked"
        Err err -> println err
p.visually-hidden End code.